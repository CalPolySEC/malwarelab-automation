from flask import Blueprint, request, abort, url_for, jsonify, session, g, redirect
import vmware_automate
from vmware_automate import ESXI_Host, ESXI_Guest
from pyVmomi import vim

vms = Blueprint('vms', __name__, url_prefix='/vms')

vmware = vmware_automate.setup()
print(vmware)

host = ESXI_Host(vmware['esxi']['host'], vmware['esxi']['user'], vmware['esxi']['password'], naming_scheme=vmware['naming_scheme'])
guests = []
vmware['esxi'] = {'host': host, 'guests': []}
for vm in host.lsVMs():
    guest = ESXI_Guest(host, vm, vmware['guest']['user'], vmware['guest']['password'])
    guests.append(guest)

vmware['esxi'] = {'host': host, 'guests': guests}

def findVM(vm_name):
    global vmware
    guests = vmware['esxi']['guests']

    vm = list(filter(lambda x: x.guest == vm_name, guests))
    if len(vm) > 0:
        vm = vm.pop()
    else:
        vm = None
    return vm

#### VMWARE ESXI API INTERFACE ####

@vms.route('/', methods=['GET'])
def vm_main():
    global vmware
    return jsonify({'vms': vmware['esxi']['host'].lsVMs(), 'naming scheme': vmware['naming_scheme']})

@vms.route('/<vm_name>', methods=['GET'])
@vms.route('/<vm_name>/', methods=['GET'])
def vm_get(vm_name):
    vm = findVM(vm_name)
    print(vm)
    if not vm:
        vm_name = None

    return jsonify({'vm': vm.as_dict() if vm else None})

@vms.route('/<vm_name>/upload', methods=['POST'])
def vm_upload(vm_name):
    files = request.files
    if len(files) == 0:
        return jsonify({'vm': vm_name, 'error': 'no files found in uploaded data'})

    data = {}
    vm = findVM(vm_name)
    data['vm'] = vm_name
    if vm:
        for file in files:
            vm.upload(files[file].read(), filename=files[file].filename)
        data['uploaded'] = True
    else:
        vm_name = None
    return jsonify(data)

@vms.route('/<vm_name>/snapshots', methods=['GET'])
def vm_snapshots(vm_name):
    vm = findVM(vm_name)
    if vm:
        snapshots = vm.makeJSON(vm.getSnapshots())
    else:
        snapshots = None
        vm_name = None
    return jsonify({'vm': vm_name, 'snapshots': snapshots})

@vms.route('/<vm_name>/snapshots/create', methods=['GET'])
def vm_snapshots_create(vm_name):
    args = request.args
    if args.get('name', None) is None:
        return jsonify({'vm': vm_name, 'error': 'missing required name argument'})
    else:
        name = args.get('name')

    memory = args.get('memory', False)
    memory = bool(memory)

    pause = args.get('pause', True)
    pause = bool(pause)

    vm = findVM(vm_name)
    if vm:
        snapshot = vm.createSnapshot(name, memory=memory, pause=pause)
        snapshot = str(snapshot)
    else:
        snapshots = None
        vm_name = None
    return jsonify({'vm': vm_name, 'snapshot': snapshot})

@vms.route('/<vm_name>/snapshots/<name>/revert', methods=['GET'])
def vm_snapshots_revert(vm_name, name):
    vm = findVM(vm_name)
    results = vm.revertToSnapshot(name)

    return jsonify({'vm': vm_name, 'snapshot': name, 'results': vm.makeJSON(results)})

@vms.route('/<vm_name>/power', methods=['GET'])
def vm_power_list(vm_name):
    vm = findVM(vm_name)
    if vm:
        modes = vm.getPowerModes()
    else:
        modes = None
        vm_name = None
    return jsonify({'vm': vm_name, 'modes': modes})

@vms.route('/<vm_name>/power/<mode>', methods=['GET'])
def vm_power(vm_name, mode):
    vm = findVM(vm_name)
    if vm:
        status = vm.power(mode)
    else:
        status = None
        vm_name = None
    res = {'vm': vm_name}
    res.update(status)
    return jsonify(res)

@vms.route('/<vm_name>/reset', methods=['GET'])
def vm_reset(vm_name):
    vm = findVM(vm_name)
    if not vm:
        return '', 404

    status = vm.power('off')
    results = vm.revertToSnapshot('clean')

    return jsonify({'vm': vm_name, 'power_status': status, 'results': vm.makeJSON(results)})
